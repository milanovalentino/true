import requests
from bs4 import BeautifulSoup
import os

URL = "https://thetruestory.news/ru/russia"
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHANNEL_ID = os.getenv("TELEGRAM_CHANNEL_ID")

def parse_stories():
    response = requests.get(URL)
    response.raise_for_status()
    soup = BeautifulSoup(response.text, "html.parser")

    stories = soup.find_all("a", class_="s2 story illustrated")

    results = []

    for story in stories[:7]:  # –í–æ–∑—å–º—ë–º 7 –Ω–æ–≤–æ—Å—Ç–µ–π, –∫–∞–∫ –≤ —à–∞–±–ª–æ–Ω–µ
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        headline = story.select_one(".s2.message.headline.pinned h2")
        title = headline.get_text(strip=True) if headline else "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"

        # –ü–µ—Ä–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ (–Ω–∞–∑–≤–∞–Ω–∏–µ + —Å—Å—ã–ª–∫–∞)
        first_message_source = story.select_one(".s2.message.headline.pinned .s2.source")
        source_name = first_message_source.get_text(strip=True) if first_message_source else ""

        # –ü–æ–ø—ã—Ç–∫–∞ –≤–∑—è—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª –∏–∑ –º–µ–Ω—é –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–ø–µ—Ä–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –≤ —Å–ø–∏—Å–∫–µ)
        source_links = story.select(".local li")
        source_url = ""
        if source_links:
            # –ë–µ—Ä—ë–º —Å—Å—ã–ª–∫—É –∏–∑ –ø–µ—Ä–≤–æ–π –∏–∫–æ–Ω–∫–∏ "–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É" (–æ–±—ã—á–Ω–æ —ç—Ç–æ –≤ —Ç–µ–≥–∞—Ö <li> —Å title –∏–ª–∏ <a>)
            # –í HTML –∏–∑ –ø—Ä–∏–º–µ—Ä–∞ —Å—Å—ã–ª–∫–∏ –Ω–µ—Ç –ø—Ä—è–º–æ–π, –Ω–æ –µ—Å–ª–∏ –±—ã –±—ã–ª–∞, –Ω–∞–¥–æ –ø–∞—Ä—Å–∏—Ç—å.  
            # –ó–¥–µ—Å—å –æ—Å—Ç–∞–≤–∏–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–º —Å—é–∂–µ—Ç, –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å.
            source_url = f"https://thetruestory.news{story.get('href')}"

        results.append({
            "title": title,
            "source_name": source_name,
            "source_url": source_url
        })

    return results

def build_message(stories):
    from datetime import datetime
    now = datetime.now().strftime("%d.%m.%Y %H:%M")

    text = f"üóû –ï–ñ. –î–µ–Ω—å ‚Äî –≥–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∫ {now}:\n\n"

    emoji_numbers = ["1‚É£", "2‚É£", "3‚É£", "4‚É£", "5‚É£", "6‚É£", "7‚É£"]

    for i, story in enumerate(stories):
        number_emoji = emoji_numbers[i] if i < len(emoji_numbers) else f"{i+1}."
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å —Å—Å—ã–ª–∫–æ–π markdown
        if story["source_url"]:
            text += f"{number_emoji} {story['title']} ([{story['source_name']}]({story['source_url']})).\n\n"
        else:
            text += f"{number_emoji} {story['title']} ({story['source_name']}).\n\n"

    return text

def send_to_telegram(text):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    data = {
        "chat_id": CHANNEL_ID,
        "text": text,
        "parse_mode": "Markdown",
        "disable_web_page_preview": False,
    }
    response = requests.post(url, data=data)
    response.raise_for_status()

if __name__ == "__main__":
    stories = parse_stories()
    message = build_message(stories)
    print(message)  # –ß—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –≤ –ª–æ–≥–∞—Ö GitHub Actions
    send_to_telegram(message)
